FROM ubuntu:focal

RUN export LC_ALL=C DEBIAN_FRONTEND=noninteractive && \
    apt-get -y --no-install-recommends update && \
    apt-get -y --no-install-recommends upgrade && \
    apt-get install -y --no-install-recommends \
        build-essential \
        git \
        wget \
        nano \
        dialog \
        software-properties-common \
        libatlas-base-dev \
        libleveldb-dev \
        libsnappy-dev \
        libhdf5-serial-dev \
        libboost-all-dev \
        libgflags-dev \
        libgoogle-glog-dev \
        liblmdb-dev \
        pciutils \
        python3-setuptools \
        python3-dev \
        python3-pip \
        opencl-headers \
        ocl-icd-opencl-dev \
        libviennacl-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libv4l-dev \
        libxvidcore-dev \
        libx264-dev \
        libgtk-3-dev \
        gfortran \
        pkg-config \
        libssl-dev \
        libcanberra-gtk-module \
        \
        libatlas-base-dev \
        libprotobuf-dev \
        protobuf-compiler \
        libturbojpeg0-dev \
        cmake \
        libopencv-dev \
        python3-opencv \
        python3-numpy

RUN wget \
      http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run && \
    sh cuda_10.2.89_440.33.01_linux.run --silent --toolkit && \
    rm cuda_10.2.89_440.33.01_linux.run

RUN wget \
      https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.2_20191118/cudnn-10.2-linux-x64-v7.6.5.32.tgz && \
    tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz && \
    cp cuda/include/cudnn*.h /usr/local/cuda/include && \
    cp cuda/lib64/libcudnn* /usr/local/cuda/lib64 && \
    chmod a+r /usr/local/cuda/include/cudnn*.h \
      /usr/local/cuda/lib64/libcudnn* && \
    rm -rf cudnn-10.2-linux-x64-v7.6.5.32.tgz cuda

RUN git clone \
    --depth 1 --branch focal-cuda11 \
    https://github.com/frankier/caffe.git \
    /opt/caffe

RUN cd /opt/caffe && \
    mkdir build && \
    cd build && \
    cmake \
      -DCMAKE_INSTALL_PREFIX:PATH=/usr/local \
      -DCMAKE_BUILD_TYPE="Release" \
      -DBLAS=atlas \
      -Dpython_version=3 \
      -DUSE_NCCL=ON \
      -DUSE_CUDNN=ON \
      -DCPU_ONLY=OFF \
      .. && \
    make -j"$(nproc)" install && \
      make clean && \
      cd .. && \
      rm -rf build

